
pipeline {
    
    agent any

    parameters {
        string(name: "VPC_ID", default: 'none', description: "Parameter for VPC id.")
        string(name: "AWS_ALB", default: 'none', description: "Parameter for ALB id.")
    }
    
    environment {
            AWS_ID = credentials('AWS_ACCOUNT_ID')
            AWS_REGION = credentials('AWS_Region')
            AWS_PROFILE = 'default'
    }

    stages {

        stage("Configure"){
            steps{
                withAWS(credentials: 'AWS_Ricky', region: "$AWS_REGION"){
                    s3Download(file: 'secrets', bucket: 'rl-secrets', force: "true")
                    sh 'mv secrets/docker/env-files docker/ecs/'
                    sh 'aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin "$AWS_ID.dkr.ecr.$AWS_REGION.amazonaws.com"'
                    sh 'docker context use rl-ecs'
                }
            }
        }

        stage("Image Update") {
            when{not {environment name: 'JOB_NAME' , value: 'rl-folder/Infrastructure/ECS'}} //runs only if pipeline is a microservice update pipeline.
            steps{
                withAWS(credentials: 'AWS_Ricky', region: "$AWS_REGION"){
                    dir('docker/ecs/microservices'){
                        sh 'printenv'
                        sh 'aws ecs list-services --cluster rl-aline | grep "Aline${MICRO_NAME}Service"'  
                        sh 'aws ecs update-service --cluster rl-aline --service "Aline${MICRO_NAME}Service" --force-new-deployment --profile default'
                    }
                }
            }
        }

        stage("Update Deployment"){
            when{environment name: 'JOB_NAME' , value: 'rl-folder/Infrastructure/ECS'}  //runs only if pipeline is not a microservice update pipeline.
            steps{
                dir('docker/ecs'){
                    sh '''
                    docker compose --project-name rl-aline up 
                    '''
                }
            }
        }

    }

    post {
        cleanup {
            sh 'rm -rf secrets/'
            sh 'rm -rf docker/ecs/env-files/'
        }
    }

}