pipeline {
    
    agent any

    parameters {
        booleanParam(name: "createCluster", defaultValue:"false", description: "Parameter to determine whether cluster should be created.")
        string(name: "VPC_ID", description: "Parameter for VPC id.")
        string(name: "PRIV_SUBNET_0", description: "Parameter for private subnet id #0. (us-West-1a)")
        string(name: "PRIV_SUBNET_1", description: "Parameter for private subnet id #1. (us-West-1c)")
        string(name: "PUB_SUBNET_0", description: "Parameter for public subnet id #0. (us-West-1a)")
        string(name: "PUB_SUBNET_1", description: "Parameter for public subnet id #1. (us-West-1c)")
    }

    environment {
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY')
        AWS_REGION = credentials('AWS_Region')
        VPC_ID = "${params.VPC_ID}"
        PRIV_SUBNET_0 = "${params.PRIV_SUBNET_0}"
        PRIV_SUBNET_1 = "${params.PRIV_SUBNET_1}"
        PUB_SUBNET_0 = "${params.PUB_SUBNET_0}"
        PUB_SUBNET_1 = "${params.PUB_SUBNET_1}"
    }

    stages {

        stage("Process") {
            steps{
                dir('k8s/cluster'){   
                    sh "envsubst < cluster.yaml"
                }
            }
        }

        stage("Create Cluster"){
            when{expression{params.CreateCluster}}

            steps{
                dir('k8s/cluster'){
                    withAWS(credentials: 'AWS_Ricky', region: "$AWS_REGION"){
                        sh "envsubst < cluster.yaml | eksctl upgrade cluster -f -"
                    }
                }
            }
        }

        stage("Apply K8s Infrastructure"){
            steps{
                dir('k8s'){
                    withAWS(credentials: 'AWS_Ricky', region: "$AWS_REGION"){
                        s3Download(file: 'secrets', bucket: 'rl-secrets', force:"true" )
                        
                        sh """
                        kubectl apply -f secrets/k8s/env/aline-secret.yaml
                        kubectl apply -f secrets/k8s/env/microservice-configmap.yaml
                        kubectl apply -f service/
                        """
                    }
                }
            }
        }


    }


    post {
        cleanup {
            dir('k8s'){
                sh "rmdir --ignore-fail-on-non-empty secrets/"
            }
        }
    }
}